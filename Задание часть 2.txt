Ты являешься разработчиком одной из дочерних компаний Upisoft, которая разрабатывает компьютерные игры.
Компания разрабатывает игру по мотивам книги «Властелин колец» Дж. Р. Толкина. Вашей команде предстоит
разработать симулятор сражения армий «Последняя битва Средиземья».

Твоя задача реализовать типы данных воинов, сражающихся на разных сторонах. Типы данных, которые
необходимо создать: Human, Wizard, Elf, WoodenElf, Rohhirim, Orc, UrukHai, Troll, Goblin. Кроме того,
необходимо создать вспомогательные типы данных: Horse и Warg. Все перечисленные типы данных должны
приводиться к типу данных Unit (см. задание из урока Обобщения). Типы данных должны удовлетворять следующим условиям.

    1.Экземпляры всех перечисленных типов данных должны обладать недоступным для чтения и записи полем power,
    содержащим целочисленное значение, отражающее силу юнита.
    2.Экземпляры всех перечисленных типов данных должны предоставлять метод isAlive, возвращающий true
    если power>0 и false во всех остальных случаях.
    3.Значение power должно задаваться при создании экземпляров и удовлетворять следующим требованиям к начальному значению:
        для класса Wizard: power=20;
        для класса Human: power находится в диапазоне от 7 до 8;
        для класса Elf: power находится в диапазоне от 4 до 7;
        для класса WoodenElf: power=6power=6;
        для класса Orc: power находится в диапазоне от 8 до 10;
        для класса UrukHai: power находится в диапазоне от 10 до 12;
        для класса Troll: power находится в диапазоне от 11 до 15;
        для класса Goblin: power находится в диапазоне от 2 до 5.
    4.Экземпляры типа Rohhirim должны приводиться к типам Human.
    5.Экземпляры типа UrukHai должны приводиться к типам Orc.
    6.Экземпляры типа Rohhirim содержат в себе экземпляры типа Horse.
    7.Некоторые экземпляры типов Human содержат в себе экземпляры типа Horse.
    8.Все экземпляры типа Wizard содержат в себе экземпляры типа Horse.
    9.Некоторые экземпляры типа Orc содержат в себе экземпляры типа Warg.
    10.Возвращаемое значение power для экземпляров, содержащих в себе экземпляры типа Horse или Warg
    увеличено соответственно на значение от 4 до 5 для экземпляров, содержащих в себе экземпляры типа Horse
    и на значение от 4 до 7 для экземпляров, содержащих в себе экземпляры типа Warg.
    11.Начальное значение для экземпляров перечисленных типов в случае, если оно находится в определенном
    диапазоне должно выбираться произвольно из этого диапазона при создании соответствующего объекта.
    12.Экземпляры типов Human, Wizard, Elf, Rohhirim, Elf, WoodenElf относятся к категории MiddleEarthUnit.
    13.Экземпляры типов Orc, UrukHai, Troll, Goblin относятся к категории MordorUnit.
    14.Экземпляры типов Wizard, Human (при наличии экземпляра класса Horse) Rohhirim, Orc (при наличии
    экземпляра класса Warg) относятся к типу данных Cavalry.
    15.Экземпляры остальных типов данных, за исключением Horse и Warg относятся к типу данных Infantry.
    16.Экземпляры классов Horse и Warg не могут существовать отдельно от экземпляров классов, к которым они привязаны.
    17.Экземпляры типов Human, Wizard, Elf, WoodenElf, Rohhirim, Orc, UrukHai, Troll, Goblin должны
    обладать публичным обобщенным методом strike, принимающий в качестве параметра экземпляр типа обобщения.
    18.В методе strike у аргумента должно уменьшаться значение power на значение power текущего экземпляра класса.
    При вычислении power текущего экземпляра должно учитываться значение power самого экземпляра и power
    верхового животного (Horse, Warg), если таковой имеется.
    19.При уменьшении значений power элементов, содержащих внутри себя Horse или Warg, должны действовать следующие правила:
        сначала уменьшается значение power для Horse или Warg (в зависимости от типа объекта);
        если значение power для Horse или Warg уменьшалось, уменьшение значения power для самого элемента происходить не может;
        если power Horse или Warg равно нулю, тогда уменьшается значение power самого элемента.
    20.Экземпляры типов всех указанных типов данных должны обеспечивать, что значение power никогда
    не будет увеличиваться и никогда не будет меньше нуля, при попытке увеличить значение power оно не должно меняться.
    21.У всех перечисленных классов должно быть недоступное для чтения и записи поле name, значение которого
    задается при создании объекта (если было передано ошибочное значение, в name должна быть записана строка,
    которая получается при выполнении команды: super.toString().
    22.У экземпляров классов Horse и Warg конструкторы не должны принимать в качестве параметров
    значения для инициализации name.
    23.У всех перечисленных классов должен быть метод toString, который возвращает строку в
    формате “{Class.name} {name} has power {power}”, где {Class.name} – имя класса текущего
    объекта (используйте команду this.getClass().getSimpleName() для получения имени класса) {name} и {power} – значения
    соответствующих полей классов.

Все классы необходимо размещать внутри структуры пакета com.intellekta.generics.middleearth.

При оценке задания будут дополнительно оцениваться указанные ниже параметры.

    Качество проектирования структуры классов.
    Использование принципов ООП (Абстракция, Наследование, Инкапсуляция и Полиморфизм).
    Корректность формирования структуры пакета com.intellekta.generics.middleearth.
    Целостность: тесты будут проверять ранее существующие классы (см. задание из урока Обобщения) и вновь добавленные. Вся структура классов должна работать корректно.

В качестве ответа на задание приведите исходные коды пакета com.intellekta.generics.middleearth.